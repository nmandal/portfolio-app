import Head from 'next/head';
import Link from 'next/link';

import { useForm } from 'react-hook-form';
import { motion } from 'framer-motion';
import { ExclamationCircleIcon } from '@heroicons/react/solid';
import toast, { Toaster } from 'react-hot-toast';
import { useState } from 'react';

export default function Home() {
  const [formValues, setFormValues] = useState([{ symbol: "", shares: 0 }])


let handleChange = (i, e) => {
  let newFormValues = [...formValues];
  newFormValues[i][e.target.name] = e.target.value;
  setFormValues(newFormValues);
}
  
let addFormFields = () => {
  console.log('hello')
  setFormValues([...formValues, { symbol: "", shares: 0 }])
  console.log(formValues)
}

let removeFormFields = (i) => {
  let newFormValues = [...formValues];
  newFormValues.splice(i, 1);
  setFormValues(newFormValues)
}

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitted },
    reset
  } = useForm();

  const create = async (data) => {
    fetch('http://localhost:3000/api/portfolio', {
      body: JSON.stringify(data),
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
      }
    })
  };

  const onSubmit = async (data) => {
    toast.promise(
      create(data),
      {
        loading: 'Working on it...',
        success: 'Portfolio created successfully!',
        error: 'Oops! something went wrong.',
      },
      {
        duration: 3000,
      }
    );
    reset()
  };

  return (
    <div>
      <Head>
        <title>Portfolio App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Link href="/">
        <a>Go back</a>
      </Link>
      <section className="">
        <Toaster />
        <div className="h-screen max-w-md mx-auto px-4">
          <h1 className="font-bold text-3xl md:text-4xl text-white tracking-wide mb-10 text-center">
            Create Portfolio
          </h1>

          <form
            onSubmit={handleSubmit(onSubmit)}
            className="grid grid-cols-1 gap-y-6 shadow-lg p-10 bg-gray-800  rounded-lg"
          >
            <div>
              <label htmlFor="date" className="sr-only">
                Date
              </label>
              <div className="relative">
                <input
                  {...register('date', { required: true })}
                  type="text"
                  name="date"
                  id="date"
                  className={`block w-full shadow-sm py-3 text-white px-4 mb-2 bg-gray-700 placeholder-gray-500  border-gray-500 rounded-md ${
                    errors.name
                      ? 'focus:ring-red-500 border-red-500'
                      : 'focus:ring-blue-500 focus:border-blue-500'
                  }`}
                  placeholder="2021-01-01"
                />

                {errors.date && (
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <ExclamationCircleIcon
                      className="h-5 w-5 text-red-600"
                      aria-hidden="true"
                    />
                  </div>
                )}
              </div>
            </div>


            {formValues.map((element, index) => {
            <div className="relative" key={index}>
            <label>Ticker</label>
            <div className='relative'>
            <input
                  {...register('ticker', { required: true })}
                  type="text"
                  name="ticker"
                  id="ticker"
                  className={`block w-full shadow-sm py-3 text-white px-4 mb-2 bg-gray-700 placeholder-gray-500  border-gray-500 rounded-md ${
                    errors.name
                      ? 'focus:ring-red-500 border-red-500'
                      : 'focus:ring-blue-500 focus:border-blue-500'
                  }`}
                  placeholder="2021-01-01"
                />
                </div>
            <input type="text" name="name" value={element.symbol || ""} onChange={e => handleChange(index, e)} />
            <label>Shares</label>
            <div className='relative'>
            <input
                  {...register('shares', { required: true })}
                  type="text"
                  name="shares"
                  id="shares"
                  className={`block w-full shadow-sm py-3 text-white px-4 mb-2 bg-gray-700 placeholder-gray-500  border-gray-500 rounded-md ${
                    errors.name
                      ? 'focus:ring-red-500 border-red-500'
                      : 'focus:ring-blue-500 focus:border-blue-500'
                  }`}
                  placeholder="2021-01-01"
                />
                
            <input type="text" name="email" value={element.shares || ""} onChange={e => handleChange(index, e)} />
            {
              index ? 
                <button type="button"  className="button remove" onClick={() => removeFormFields(index)}>Remove</button> 
              : null
            }
            </div>

          </div>
            })}

          <div className="button-section">
              <button className="button add" type="button" onClick={() => addFormFields()}>Add</button>
              <button className="button submit" type="submit">Submit</button>
          </div>

            <div>
              <motion.button
                disabled={isSubmitted}
                whileHover={{
                  scale: 1.05,
                  transition: { duration: 0.2 },
                }}
                whileTap={{
                  scale: 0.9,
                  transition: { duration: 0.2 },
                }}
                type="submit"
                className="w-full justify-center py-3 px-6 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-blue-700 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                Submit
              </motion.button>
            </div>
          </form>
        </div>
      </section>
    </div>
  );
}
